# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, it is common to ignore the PyCharm cache directories.
.idea/

# VSCode
.vscode/

# macOS
.DS_Store

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/

# Linux
*~

# Project specific files
# Environment variables (contains sensitive information)
.env
.env.local
.env.production
.env.development

# Database files
*.db
*.sqlite
*.sqlite3

# Log files
*.log
logs/
log/

# Temporary files
temp/
tmp/
*.tmp
*.temp

# Backup files
*.bak
*.backup
*.orig

# IDE and editor files
*.swp
*.swo
*~
.vim/
.nvim/

# AI/ML specific
# Vector database storage
vector_db/
chroma_db/
chromadb/
embeddings/

# Model files (if any local models are stored)
models/
*.bin
*.safetensors
*.pt
*.pth
*.onnx

# Data files
data/raw/
data/processed/
*.csv
*.json
*.jsonl
*.parquet
*.pkl
*.pickle

# Keep cleaned_policies but ignore raw data
data/raw_policies/
data/backup/

# Configuration overrides
config/local.py
config/production.py
config/development.py

# Documentation build
docs/_build/
docs/build/

# Coverage reports
htmlcov/
.coverage
coverage.xml

# Performance profiling
*.prof
*.profile

# Jupyter notebook checkpoints
.ipynb_checkpoints/
*/.ipynb_checkpoints/*

# Virtual environment
venv/
.venv/
env/
.env/
virtualenv/

# Package management
*.egg-info/
dist/
build/

# Cache directories
.cache/
__pycache__/
.pytest_cache/

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# API keys and secrets (extra safety)
*.key
*.pem
*.p12
secrets.json
credentials.json

# Docker
.dockerignore
Dockerfile.local
docker-compose.override.yml

# Kubernetes
*.kubeconfig
k8s/secrets/

# Terraform
*.tfstate
*.tfstate.backup
.terraform/

# Local development tools
.devcontainer/
.vagrant/

# Application specific
# Uploaded files (if any)
uploads/
static/uploads/

# Generated reports
reports/
output/

# Monitoring and metrics
metrics/
monitoring/

# Testing
test_results/
test_reports/
.pytest_cache/
.coverage

# Backup and recovery
backup/
*.backup
*.bak

# Local configuration
local_config.py
local_settings.py

# Runtime files
*.pid
*.lock

# Application logs
app.log
error.log
access.log
debug.log

# FastAPI specific
.pytest_cache/

# SQLAlchemy migrations (if using Alembic)
alembic/versions/__pycache__/

# Temporary development files
scratch/
experiments/
playground/
testing/

# AI model outputs
generated/
outputs/
results/